/* Metadata Options (Race) */
options metaserver="localhost" 
metaport=8561
metarepository="Foundation"
metaprotocol="BRIDGE"
metauser="sasdemo"
metapass="Orion123";


/* setup */
%let excel_file = 'C:\Users\sas\Desktop\Final_v92\MAPPINGS.xls';

/* Filenames */
filename request "C:\Users\sas\Desktop\Final_v92\request.xml";
filename response "C:\Users\sas\Desktop\Final_v92\response.xml";
filename myxmlmap "C:\Users\sas\Desktop\Final_v92\Map.map";


proc metadata in=request out=response; run;
libname tmpmeta XML92 xmlmap=myxmlmap xmlfileref=response access=READONLY;
proc copy inlib = tmpmeta outlib = work;run;


/* Conditionally delete set of tables or views, if they exists */
/* If the member does not exist, then no action is performed   */

%macro _eg_conditional_dropds /parmbuff;
   	%let num=1;
	/* flags to determine whether a PROC SQL step is needed */
	/* or even started yet                                  */
	%let stepneeded=0;
	%let stepstarted=0;
   	%let dsname=%scan(&syspbuff,&num,',()');
	%do %while(&dsname ne);	
		%if %sysfunc(exist(&dsname)) %then %do;
			%let stepneeded=1;
			%if (&stepstarted eq 0) %then %do;
				proc sql;
				%let stepstarted=1;
			%end;
				drop table &dsname;
		%end;
		%if %sysfunc(exist(&dsname,view)) %then %do;
			%let stepneeded=1;
			%if (&stepstarted eq 0) %then %do;
				proc sql;
				%let stepstarted=1;
			%end;
				drop view &dsname;
		%end;
		%let num=%eval(&num+1);
      	%let dsname=%scan(&syspbuff,&num,',()');
	%end;
	%if &stepstarted %then %do;
		quit;
	%end;
%mend _eg_conditional_dropds;


/* Build where clauses from stored process parameters */

%macro _eg_WhereParam( COLUMN, PARM, OPERATOR, TYPE=S, MATCHALL=_ALL_VALUES_, MATCHALL_CLAUSE=1, MAX= , IS_EXPLICIT=0);
  %local q1 q2 sq1 sq2;
  %local isEmpty;
  %local isEqual;
  %let isEqual = ("%QUPCASE(&OPERATOR)" = "EQ" OR "&OPERATOR" = "=");
  %let isNotEqual = ("%QUPCASE(&OPERATOR)" = "NE" OR "&OPERATOR" = "<>");
  %let isIn = ("%QUPCASE(&OPERATOR)" = "IN");
  %let isNotIn = ("%QUPCASE(&OPERATOR)" = "NOT IN");
  %local isString;
  %let isString = (%QUPCASE(&TYPE) eq S or %QUPCASE(&TYPE) eq STRING );
  %if &isString %then
  %do;
    %let q1=%str(%");
    %let q2=%str(%");
	%let sq1=%str(%'); 
    %let sq2=%str(%'); 
  %end;
  %else %if %QUPCASE(&TYPE) eq D or %QUPCASE(&TYPE) eq DATE %then 
  %do;
    %let q1=%str(%");
    %let q2=%str(%"d);
	%let sq1=%str(%'); 
    %let sq2=%str(%'); 
  %end;
  %else %if %QUPCASE(&TYPE) eq T or %QUPCASE(&TYPE) eq TIME %then
  %do;
    %let q1=%str(%");
    %let q2=%str(%"t);
	%let sq1=%str(%'); 
    %let sq2=%str(%'); 
  %end;
  %else %if %QUPCASE(&TYPE) eq DT or %QUPCASE(&TYPE) eq DATETIME %then
  %do;
    %let q1=%str(%");
    %let q2=%str(%"dt);
	%let sq1=%str(%'); 
    %let sq2=%str(%'); 
  %end;
  %else
  %do;
    %let q1=;
    %let q2=;
	%let sq1=;
    %let sq2=;
  %end;
  
  %if "&PARM" = "" %then %let PARM=&COLUMN;

  %local isBetween;
  %let isBetween = ("%QUPCASE(&OPERATOR)"="BETWEEN" or "%QUPCASE(&OPERATOR)"="NOT BETWEEN");

  %if "&MAX" = "" %then %do;
    %let MAX = &parm._MAX;
    %if &isBetween %then %let PARM = &parm._MIN;
  %end;

  %if not %symexist(&PARM) or (&isBetween and not %symexist(&MAX)) %then %do;
    %if &IS_EXPLICIT=0 %then %do;
		not &MATCHALL_CLAUSE
	%end;
	%else %do;
	    not 1=1
	%end;
  %end;
  %else %if "%qupcase(&&&PARM)" = "%qupcase(&MATCHALL)" %then %do;
    %if &IS_EXPLICIT=0 %then %do;
	    &MATCHALL_CLAUSE
	%end;
	%else %do;
	    1=1
	%end;	
  %end;
  %else %if (not %symexist(&PARM._count)) or &isBetween %then %do;
    %let isEmpty = ("&&&PARM" = "");
    %if (&isEqual AND &isEmpty AND &isString) %then
       &COLUMN is null;
    %else %if (&isNotEqual AND &isEmpty AND &isString) %then
       &COLUMN is not null;
    %else %do;
	   %if &IS_EXPLICIT=0 %then %do;
           &COLUMN &OPERATOR %unquote(&q1)&&&PARM%unquote(&q2)
	   %end;
	   %else %do;
	       &COLUMN &OPERATOR %unquote(%nrstr(&sq1))&&&PARM%unquote(%nrstr(&sq2))
	   %end;
       %if &isBetween %then 
          AND %unquote(&q1)&&&MAX%unquote(&q2);
    %end;
  %end;
  %else 
  %do;
	%local emptyList;
  	%let emptyList = %symexist(&PARM._count);
  	%if &emptyList %then %let emptyList = &&&PARM._count = 0;
	%if (&emptyList) %then
	%do;
		%if (&isNotin) %then
		   1;
		%else
			0;
	%end;
	%else %if (&&&PARM._count = 1) %then 
    %do;
      %let isEmpty = ("&&&PARM" = "");
      %if (&isIn AND &isEmpty AND &isString) %then
        &COLUMN is null;
      %else %if (&isNotin AND &isEmpty AND &isString) %then
        &COLUMN is not null;
      %else %do;
	    %if &IS_EXPLICIT=0 %then %do;
            &COLUMN &OPERATOR (%unquote(&q1)&&&PARM%unquote(&q2))
	    %end;
		%else %do;
		    &COLUMN &OPERATOR (%unquote(%nrstr(&sq1))&&&PARM%unquote(%nrstr(&sq2)))
		%end;
	  %end;
    %end;
    %else 
    %do;
       %local addIsNull addIsNotNull addComma;
       %let addIsNull = %eval(0);
       %let addIsNotNull = %eval(0);
       %let addComma = %eval(0);
       (&COLUMN &OPERATOR ( 
       %do i=1 %to &&&PARM._count; 
          %let isEmpty = ("&&&PARM&i" = "");
          %if (&isString AND &isEmpty AND (&isIn OR &isNotIn)) %then
          %do;
             %if (&isIn) %then %let addIsNull = 1;
             %else %let addIsNotNull = 1;
          %end;
          %else
          %do;		     
            %if &addComma %then %do;,%end;
			%if &IS_EXPLICIT=0 %then %do;
                %unquote(&q1)&&&PARM&i%unquote(&q2) 
			%end;
			%else %do;
			    %unquote(%nrstr(&sq1))&&&PARM&i%unquote(%nrstr(&sq2)) 
			%end;
            %let addComma = %eval(1);
          %end;
       %end;) 
       %if &addIsNull %then OR &COLUMN is null;
       %else %if &addIsNotNull %then AND &COLUMN is not null;
       %do;)
       %end;
    %end;
  %end;
%mend;

/* ---------------------------------- */
/* MACRO: enterpriseguide             */
/* PURPOSE: define a macro variable   */
/*   that contains the file system    */
/*   path of the WORK library on the  */
/*   server.  Note that different     */
/*   logic is needed depending on the */
/*   server type.                     */
/* ---------------------------------- */
%macro enterpriseguide;
%global sasworklocation;
%if &sysscp=OS %then %do; /* MVS Server */
	%if %sysfunc(getoption(filesystem))=MVS %then %do;
        /* By default, physical file name will be considered a classic MVS data set. */
	    /* Construct dsn that will be unique for each concurrent session under a particular account: */
		filename egtemp '&egtemp' disp=(new,delete); /* create a temporary data set */
 		%let tempdsn=%sysfunc(pathname(egtemp)); /* get dsn */
		filename egtemp clear; /* get rid of data set - we only wanted its name */
		%let unique_dsn=".EGTEMP.%substr(&tempdsn, 1, 16).PDSE"; 
		filename egtmpdir &unique_dsn
			disp=(new,delete,delete) space=(cyl,(5,5,50))
			dsorg=po dsntype=library recfm=vb
			lrecl=8000 blksize=8004 ;
		options fileext=ignore ;
	%end; 
 	%else %do; 
        /* 
		By default, physical file name will be considered an HFS 
		(hierarchical file system) file. 
		*/
		%if "%sysfunc(getoption(filetempdir))"="" %then %do;
			filename egtmpdir '/tmp';
		%end;
		%else %do;
			filename egtmpdir "%sysfunc(getoption(filetempdir))";
		%end;
	%end; 
	%let path=%sysfunc(pathname(egtmpdir));
        %let sasworklocation=%sysfunc(quote(&path));  
%end; /* MVS Server */
%else %do;
	%let sasworklocation = "%sysfunc(getoption(work))/";
%end;
%if &sysscp=VMS_AXP %then %do; /* Alpha VMS server */
	%let sasworklocation = "%sysfunc(getoption(work))";                         
%end;
%if &sysscp=CMS %then %do; 
	%let path = %sysfunc(getoption(work));                         
	%let sasworklocation = "%substr(&path, %index(&path,%str( )))";
%end;
%mend enterpriseguide;

%enterpriseguide

/* save the current settings of XPIXELS and YPIXELS */
/* so that they can be restored later               */
%macro _sas_pushchartsize(new_xsize, new_ysize);
	%global _savedxpixels _savedypixels;
	options nonotes;
	proc sql noprint;
	select setting into :_savedxpixels
	from sashelp.vgopt
	where optname eq "XPIXELS";
	select setting into :_savedypixels
	from sashelp.vgopt
	where optname eq "YPIXELS";
	quit;
	options notes;
	GOPTIONS XPIXELS=&new_xsize YPIXELS=&new_ysize;
%mend;

/* restore the previous values for XPIXELS and YPIXELS */
%macro _sas_popchartsize;
	%if %symexist(_savedxpixels) %then %do;
		GOPTIONS XPIXELS=&_savedxpixels YPIXELS=&_savedypixels;
		%symdel _savedxpixels / nowarn;
		%symdel _savedypixels / nowarn;
	%end;
%mend;

ODS PROCTITLE;
OPTIONS DEV=ACTIVEX;
GOPTIONS XPIXELS=0 YPIXELS=0;
FILENAME EGSRX TEMP;
ODS tagsets.sasreport13(ID=EGSRX) FILE=EGSRX STYLE=HtmlBlue STYLESHEET=(URL="file:///C:/Program%20Files/SAS/SASEnterpriseGuide/5.1/Styles/HtmlBlue.css") NOGTITLE NOGFOOTNOTE GPATH=&sasworklocation ENCODING=UTF8 options(rolap="on");

/*   START OF NODE: Append Table   */
%LET _CLIENTTASKLABEL='Append Table';
%LET _CLIENTPROJECTPATH='C:\Users\Administrator\Desktop\FINAL_MAPPINGS.egp';
%LET _CLIENTPROJECTNAME='FINAL_MAPPINGS.egp';

GOPTIONS ACCESSIBLE;
%_eg_conditional_dropds(WORK.APPEND_TABLE_0000);
PROC SQL;
CREATE TABLE WORK.APPEND_TABLE_0000 AS 
SELECT * FROM WORK.C_MAP
 OUTER UNION CORR 
SELECT * FROM WORK.S_MAP
;
Quit;


GOPTIONS NOACCESSIBLE;
%LET _CLIENTTASKLABEL=;
%LET _CLIENTPROJECTPATH=;
%LET _CLIENTPROJECTNAME=;


/*   START OF NODE: Query Builder   */
%LET _CLIENTTASKLABEL='Query Builder';
%LET _CLIENTPROJECTPATH='C:\Users\Administrator\Desktop\FINAL_MAPPINGS.egp';
%LET _CLIENTPROJECTNAME='FINAL_MAPPINGS.egp';

GOPTIONS ACCESSIBLE;
%_eg_conditional_dropds(WORK.QUERY_FOR_APPEND_TABLE);

PROC SQL;
   CREATE TABLE WORK.QUERY_FOR_APPEND_TABLE AS 
   SELECT t1.Id_map, 
          t1.TransformRole, 
          /* Source_Table_Name */
            (COALESCE(t1.TableName_sorc_work,t1.TableName_sorc)) AS Source_Table_Name, 
          t1.LIB_Name_sorc, 
          t1.Libref_sorc, 
          t1.Name_sorc_col, 
          /* Target_Table_Name */
            (coalesce(t1.TableName_tar,t1.TableName_tar_work)) AS Target_Table_Name, 
          t1.LIB_Name_tar, 
          t1.Libref_tar, 
          t1.Name_tar_col, 
          t1.StoredText, 
          t1.Id, 
          t1.Transformation_Name, 
          t1.source_desc, 
          t1.target_desc
      FROM WORK.APPEND_TABLE_0000 t1;
QUIT;

GOPTIONS NOACCESSIBLE;


%LET _CLIENTTASKLABEL=;
%LET _CLIENTPROJECTPATH=;
%LET _CLIENTPROJECTNAME=;


/*   START OF NODE: Query Builder1   */
%LET _CLIENTTASKLABEL='Query Builder1';
%LET _CLIENTPROJECTPATH='C:\Users\Administrator\Desktop\FINAL_MAPPINGS.egp';
%LET _CLIENTPROJECTNAME='FINAL_MAPPINGS.egp';

GOPTIONS ACCESSIBLE;
%_eg_conditional_dropds(WORK.QUERY_FOR_TRANSFORMATIONS);

PROC SQL;
   CREATE TABLE WORK.QUERY_FOR_TRANSFORMATIONS AS 
   SELECT t1.Id_tramsformation_step, 
          /* id_map */
            (coalesce(t1.Id_c_map,t1.Id_s_map)) AS id_map
      FROM WORK.TRANSFORMATIONS t1;
QUIT;

GOPTIONS NOACCESSIBLE;

%LET _CLIENTTASKLABEL=;
%LET _CLIENTPROJECTPATH=;
%LET _CLIENTPROJECTNAME=;

/*   START OF NODE: Query Builder2   */
%LET _CLIENTTASKLABEL='Query Builder2';
%LET _CLIENTPROJECTPATH='C:\Users\Administrator\Desktop\FINAL_MAPPINGS.egp';
%LET _CLIENTPROJECTNAME='FINAL_MAPPINGS.egp';

GOPTIONS ACCESSIBLE;
%_eg_conditional_dropds(WORK.QUERY_FOR_APPEND_TABLE_0000);

PROC SQL;
   CREATE TABLE WORK.QUERY_FOR_APPEND_TABLE_0000(label="QUERY_FOR_APPEND_TABLE") AS 
   SELECT t1.Id_map, 
          t1.TransformRole, 
          t1.Source_Table_Name, 
          t1.LIB_Name_sorc, 
          t1.Libref_sorc, 
          t1.Name_sorc_col, 
          t1.Target_Table_Name, 
          t1.LIB_Name_tar, 
          t1.Libref_tar, 
          t1.Name_tar_col, 
          t1.StoredText, 
          t2.Id_tramsformation_step, 
          t1.Transformation_Name, 
          t1.source_desc, 
          t1.target_desc
      FROM WORK.QUERY_FOR_APPEND_TABLE t1
           INNER JOIN WORK.QUERY_FOR_TRANSFORMATIONS t2 ON (t1.Id = t2.id_map);
QUIT;

GOPTIONS NOACCESSIBLE;

%LET _CLIENTTASKLABEL=;
%LET _CLIENTPROJECTPATH=;
%LET _CLIENTPROJECTNAME=;

/*   START OF NODE: Query Builder3   */
%LET _CLIENTTASKLABEL='Query Builder3';
%LET _CLIENTPROJECTPATH='C:\Users\Administrator\Desktop\FINAL_MAPPINGS.egp';
%LET _CLIENTPROJECTNAME='FINAL_MAPPINGS.egp';

GOPTIONS ACCESSIBLE;
%_eg_conditional_dropds(WORK.QUERY_FOR_APPEND_TABLE_0003);

PROC SQL;
   CREATE TABLE WORK.TABELA_FINAL (label="QUERY_FOR_APPEND_TABLE") AS 
   SELECT t2.Name AS JobName, 
          t1.Transformation_Name, 
          t1.Source_Table_Name, 
          t1.LIB_Name_sorc, 
          t1.Libref_sorc, 
          t1.Name_sorc_col, 
          t1.Target_Table_Name, 
          t1.LIB_Name_tar, 
          t1.Libref_tar, 
          t1.Name_tar_col, 
          t1.TransformRole, 
          t1.StoredText, 
          t2.Desc, 
          t1.source_desc, 
          t1.target_desc
      FROM WORK.QUERY_FOR_APPEND_TABLE_0000 t1
           INNER JOIN WORK.JOB t2 ON (t1.Id_tramsformation_step = t2.Id_Transformation_Steps)
      ORDER BY t2.Name;
QUIT;

PROC EXPORT 
  DATA=WORK.TABELA_FINAL 
  DBMS=XLS 
  OUTFILE="&excel_file." 
  REPLACE;
RUN;

GOPTIONS NOACCESSIBLE;

%LET _CLIENTTASKLABEL=;
%LET _CLIENTPROJECTPATH=;
%LET _CLIENTPROJECTNAME=;
;*';*";*/;quit;run;
ODS _ALL_ CLOSE;
